{"title":"COURS","markdown":{"yaml":{"title":"COURS"},"headingText":"Chapitre 1: PANDAS ET NUMPY","containsRefs":false,"markdown":"\n\n## 1-Introduction: MODULES SUR PYTHON\n\n### 1.1-Qu'est-ce qu'un module sur Python?\n\n\n\n\nDans l'exemple ci-dessus, mymoduleest un module contenant une seule fonction hello().\nCe module est importé main.py et sa fonction est appelée pour imprimer \"Hello, World!\".\n\nPython est livré avec une bibliothèque standard de modules qui fournissent diverses fonctionnalités telles que math les opérations mathématiques, os les fonctions liées \nau système d'exploitation et sys les paramètres et fonctions spécifiques au système.\n\nPour en savoir plus sur les modules Python, vous pouvez vous référer à la documentation officielle Python : [Ref](https://docs.python.org/3/tutorial/modules.html)\n\n\n### 1.2-Pourquoi utiliser Pandas sur Python?\n\nLa bibliothèque pandas de Python est un outil puissant pour manipuler des données structurées. Elle offre deux structures de données principales, les séries et les dataframes, qui sont hautement optimisées pour la performance et fournissent de nombreuses méthodes pour la manipulation et l'analyse des données. \n\nPandas permet également de nettoyer les données en proposant des fonctions pour traiter les valeurs manquantes, filtrer, trier et fusionner les données. Il fournit également des fonctions pour l'analyse des données, y compris le regroupement, l'agrégation et la transformation des données, ainsi que l'analyse des séries temporelles.\n\nDe plus, pandas offre des fonctions de traçage de base pour visualiser les données, qui sont compatibles avec Matplotlib. Enfin, pandas s'intègre bien avec d'autres bibliothèques, ce qui permet de créer des workflows de traitement de données plus complexes et personnalisés.\n\n### 1.3-Pourquoi utiliser Numpy sur Python?\n\nLa bibliothèque NumPy de Python est un outil puissant pour manipuler des données numériques. Elle offre une structure de données principale, le tableau, qui est hautement optimisée pour la performance et fournit de nombreuses méthodes pour la manipulation et l'analyse des données numériques.\n\nDe plus, NumPy permet également de réaliser des opérations mathématiques et statistiques avancées sur les données, ce qui en fait un outil populaire pour le calcul scientifique et l'analyse de données. \n\nDe même que pour Pandas, NumPy s'intègre bien avec d'autres bibliothèques, ce qui permet de créer des workflows de traitement de données plus complexes et personnalisés.   \n\n## 2-Les Fondamentaux de Pandas\n\n### 2.1-Creation de DataFrame\n\nPour créer un DataFrame avec le module Pandas de Python, vous pouvez utiliser la fonction `DataFrame()` et lui fournir des données sous forme de dictionnaire ou de liste de listes. Voici un exemple de création d'un DataFrame à partir d'un dictionnaire :\n\n```{.python}\nimport pandas as pd\n\ndata = {\n    'nom': ['Jean', 'Pierre', 'Michel'],\n    'age': [25, 30, 35],\n    'ville': ['Paris', 'Lyon', 'Marseille']\n}\n\ndf = pd.DataFrame(data)\nprint(df)\n```\n  \nVous pouvez également créer un DataFrame à partir d'une liste de listes en spécifiant les noms des colonnes avec l'argument `columns`:\n\n```{.python}\nimport pandas as pd\n\ndata = [\n    ['Jean', 25, 'Paris'],\n    ['Pierre', 30, 'Lyon'],\n    ['Michel', 35, 'Marseille']\n]\n\ndf = pd.DataFrame(data, columns=['nom', 'age', 'ville'])\nprint(df)\n```\n### 2.2 Index\n\nChaque ligne et chaque colonne d'un DataFrame a un index unique. Par défaut, l'index d'un DataFrame est une séquence numérique commençant à 0. Cependant, vous pouvez définir un index personnalisé pour un DataFrame en utilisant la méthode set_index().\n\nVoici un exemple de définition d'un index personnalisé pour un DataFrame :\n\n```{.python}\nimport pandas as pd\n\ndata = {\n    'Nom': ['John', 'Anna', 'Peter', 'Linda'],\n    'Age': [28, 24, 35, 32],\n    'Ville': ['New York', 'Paris', 'Berlin', 'Londres']\n}\n\n\ndf = pd.DataFrame(data)\n\n\ndf.set_index('Nom', inplace=True)\n\nprint(df)\n```\n### 2.3 Sélection de données\n\nVous pouvez sélectionner des données dans un DataFrame en utilisant des index, des noms de colonnes ou des masques booléens.\n\nVoici un exemple de sélection de données en utilisant des index :\n\n```{.python}\nimport pandas as pd\n\ndata = {\n    'Nom': ['John', 'Anna', 'Peter', 'Linda'],\n    'Age': [28, 24, 35, 32],\n    'Ville': ['New York', 'Paris', 'Berlin', 'Londres']\n}\n\n\ndf = pd.DataFrame(data)\n\n\ndf.set_index('Nom', inplace=True)\n\nprint(df.loc['Anna'])\n```\nVoici un exemple de sélection de données en utilisant des noms de colonnes :\n\n```{.python}\nimport pandas as pd\n\ndata = {\n    'Nom': ['John', 'Anna', 'Peter', 'Linda'],\n    'Age': [28, 24, 35, 32],\n    'Ville': ['New York', 'Paris', 'Berlin', 'Londres']\n}\n\ndf = pd.DataFrame(data)\n\nprint(df['Age'])\n```\n\nVoici un exemple de sélection de données en utilisant des masques booléens :\n\n```{.python}\nimport pandas as pd\n\ndata = {\n    'Nom': ['John','Anna', 'Peter', 'Linda'],\n    'Age': [28, 24, 35, 32],\n    'Ville': ['New York', 'Paris', 'Berlin', 'Londres']\n}\n\ndf = pd.DataFrame(data)\n\nmask = df['Age'] > 30\n\nprint(df[mask])\n```\n\n### 2.4 Manipulation de données\n\nPandas fournit des outils pour la manipulation de données, tels que la fusion, le filtrage, l'agrégation et la transformation de données.\n\nVoici un exemple de fusion de deux DataFrames :\n\n```{.python}\n\nimport pandas as pd\n\ndata1 = {\n    'Nom': ['John', 'Anna', 'Peter'],\n    'Age': [28, 24, 35]\n}\n\ndf1 = pd.DataFrame(data1)\n\ndata2 = {\n    'Nom': ['Peter', 'Linda'],\n    'Ville': ['Berlin', 'Londres']\n}\ndf2 = pd.DataFrame(data2)\n\nmerged_df = pd.merge(df1, df2, on='Nom')\n\nprint(merged_df)\n```\nVoici un exemple de filtrage de données en utilisant des conditions :\n\n```{.python}\nimport pandas as pd\n\n\ndata = {\n    'Nom': ['John', 'Anna', 'Peter', 'Linda'],\n    'Age': [28, 24, 35, 32],\n    'Ville': ['New York', 'Paris', 'Berlin', 'Londres']\n}\n\ndf = pd.DataFrame(data)\n\nfiltered_df = df[df['Age'] > 30]\n\nprint(filtered_df)\n```\n\nVoici un exemple d'agrégation de données en utilisant des fonctions d'agrégation :\n\n```{.python}\n\nimport pandas as pd\n\ndata = {\n    'Nom': ['John', 'Anna', 'Peter', 'Linda'],\n    'Age': [28, 24, 35, 32],\n    'Ville': ['New York', 'Paris', 'Berlin', 'Londres']\n}\n\ndf = pd.DataFrame(data)\nmean_age = df['Age'].mean()\nnum_rows = df.shape[0]\n\nprint('Mean age:', mean_age)\nprint('Number of rows:', num_rows)\n```\nVoici un exemple de transformation de données en utilisant des fonctions de transformation :\n\n```{.python}\nimport pandas as pd\n\ndata = {\n    'Nom': ['John', 'Anna', 'Peter', 'Linda'],\n    'Age': [28, 24, 35, 32],\n    'Ville': ['New York', 'Paris', 'Berlin', 'Londres']\n}\n\ndf = pd.DataFrame(data)\ndf['Uppercase Name'] = df['Name'].str.upper()\n\nprint(df)\n```\nPandas est une librairie Python puissante et flexible pour l'analyse et le traitement de données. Les DataFrames sont la structure de données de base de Pandas et sont utilisés pour stocker.\n\n## 3- Les Fondamentaux de Numpy\n\n### 3.1 Tableaux NumPy\n\nLes tableaux NumPy, également appelés ndarrays, sont des tableaux multidimensionnels homogènes qui peuvent contenir des nombres entiers ou à virgule flottante. Vous pouvez créer un tableau NumPy en utilisant la fonction array() de NumPy et en passant une liste Python comme argument.\n\nVoici un exemple de création d'un tableau NumPy à une dimension :\n\n```{.python}\n\nimport numpy as np\n\narr1 = np.array([1, 2, 3, 4, 5])\nprint(arr1)\n```\n\nVous pouvez également créer un tableau NumPy à deux dimensions en utilisant une liste de listes Python :\n\n```{.python}\n\narr2 = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\nprint(arr2)\n```\n### 3.2 Indexation et tranchage\n\nVous pouvez accéder aux éléments d'un tableau NumPy en utilisant l'indexation et le tranchage. L'indexation utilise des indices entiers pour accéder à des éléments spécifiques, tandis que le tranchage utilise des intervalles pour accéder à des plages d'éléments.\n\nVoici un exemple d'indexation et de tranchage d'un tableau NumPy à une dimension :\n\n```{.python}\n\narr1 = np.array([1, 2, 3, 4, 5])\nprint(arr1[0])  \nprint(arr1[4]) \n```\nVous pouvez également utiliser l'indexation et le tranchage pour des tableaux NumPy à plusieurs dimensions.\n\n### 3.3 Opérations sur les tableaux\n\nNumPy prend en charge de nombreuses opérations sur les tableaux, telles que l'addition, la soustraction, la multiplication et la division. Vous pouvez également utiliser des fonctions NumPy pour effectuer des opérations telles que la somme, le produit et la moyenne.\n\nVoici un exemple d'opérations sur des tableaux NumPy :\n\n```{.python}\n\narr1 = np.array([1, 2, 3])\narr2 = np.array([4, 5, 6])\n\nprint(arr1 + arr2)  \n\nprint(arr1 * arr2)  \n\nprint(np.sum(arr1))  \n\nprint(np.mean(arr1)) \n```\n\nNumPy est une bibliothèque Python puissante et utile pour le calcul numérique. Elle fournit des types de données et des fonctions pour traiter des tableaux multidimensionnels de manière efficace. En utilisant des tableaux NumPy, vous pouvez effectuer des opérations numériques rapides et efficaces en Python.","srcMarkdownNoYaml":"\n# Chapitre 1: PANDAS ET NUMPY\n\n## 1-Introduction: MODULES SUR PYTHON\n\n### 1.1-Qu'est-ce qu'un module sur Python?\n\n\n\n\nDans l'exemple ci-dessus, mymoduleest un module contenant une seule fonction hello().\nCe module est importé main.py et sa fonction est appelée pour imprimer \"Hello, World!\".\n\nPython est livré avec une bibliothèque standard de modules qui fournissent diverses fonctionnalités telles que math les opérations mathématiques, os les fonctions liées \nau système d'exploitation et sys les paramètres et fonctions spécifiques au système.\n\nPour en savoir plus sur les modules Python, vous pouvez vous référer à la documentation officielle Python : [Ref](https://docs.python.org/3/tutorial/modules.html)\n\n\n### 1.2-Pourquoi utiliser Pandas sur Python?\n\nLa bibliothèque pandas de Python est un outil puissant pour manipuler des données structurées. Elle offre deux structures de données principales, les séries et les dataframes, qui sont hautement optimisées pour la performance et fournissent de nombreuses méthodes pour la manipulation et l'analyse des données. \n\nPandas permet également de nettoyer les données en proposant des fonctions pour traiter les valeurs manquantes, filtrer, trier et fusionner les données. Il fournit également des fonctions pour l'analyse des données, y compris le regroupement, l'agrégation et la transformation des données, ainsi que l'analyse des séries temporelles.\n\nDe plus, pandas offre des fonctions de traçage de base pour visualiser les données, qui sont compatibles avec Matplotlib. Enfin, pandas s'intègre bien avec d'autres bibliothèques, ce qui permet de créer des workflows de traitement de données plus complexes et personnalisés.\n\n### 1.3-Pourquoi utiliser Numpy sur Python?\n\nLa bibliothèque NumPy de Python est un outil puissant pour manipuler des données numériques. Elle offre une structure de données principale, le tableau, qui est hautement optimisée pour la performance et fournit de nombreuses méthodes pour la manipulation et l'analyse des données numériques.\n\nDe plus, NumPy permet également de réaliser des opérations mathématiques et statistiques avancées sur les données, ce qui en fait un outil populaire pour le calcul scientifique et l'analyse de données. \n\nDe même que pour Pandas, NumPy s'intègre bien avec d'autres bibliothèques, ce qui permet de créer des workflows de traitement de données plus complexes et personnalisés.   \n\n## 2-Les Fondamentaux de Pandas\n\n### 2.1-Creation de DataFrame\n\nPour créer un DataFrame avec le module Pandas de Python, vous pouvez utiliser la fonction `DataFrame()` et lui fournir des données sous forme de dictionnaire ou de liste de listes. Voici un exemple de création d'un DataFrame à partir d'un dictionnaire :\n\n```{.python}\nimport pandas as pd\n\ndata = {\n    'nom': ['Jean', 'Pierre', 'Michel'],\n    'age': [25, 30, 35],\n    'ville': ['Paris', 'Lyon', 'Marseille']\n}\n\ndf = pd.DataFrame(data)\nprint(df)\n```\n  \nVous pouvez également créer un DataFrame à partir d'une liste de listes en spécifiant les noms des colonnes avec l'argument `columns`:\n\n```{.python}\nimport pandas as pd\n\ndata = [\n    ['Jean', 25, 'Paris'],\n    ['Pierre', 30, 'Lyon'],\n    ['Michel', 35, 'Marseille']\n]\n\ndf = pd.DataFrame(data, columns=['nom', 'age', 'ville'])\nprint(df)\n```\n### 2.2 Index\n\nChaque ligne et chaque colonne d'un DataFrame a un index unique. Par défaut, l'index d'un DataFrame est une séquence numérique commençant à 0. Cependant, vous pouvez définir un index personnalisé pour un DataFrame en utilisant la méthode set_index().\n\nVoici un exemple de définition d'un index personnalisé pour un DataFrame :\n\n```{.python}\nimport pandas as pd\n\ndata = {\n    'Nom': ['John', 'Anna', 'Peter', 'Linda'],\n    'Age': [28, 24, 35, 32],\n    'Ville': ['New York', 'Paris', 'Berlin', 'Londres']\n}\n\n\ndf = pd.DataFrame(data)\n\n\ndf.set_index('Nom', inplace=True)\n\nprint(df)\n```\n### 2.3 Sélection de données\n\nVous pouvez sélectionner des données dans un DataFrame en utilisant des index, des noms de colonnes ou des masques booléens.\n\nVoici un exemple de sélection de données en utilisant des index :\n\n```{.python}\nimport pandas as pd\n\ndata = {\n    'Nom': ['John', 'Anna', 'Peter', 'Linda'],\n    'Age': [28, 24, 35, 32],\n    'Ville': ['New York', 'Paris', 'Berlin', 'Londres']\n}\n\n\ndf = pd.DataFrame(data)\n\n\ndf.set_index('Nom', inplace=True)\n\nprint(df.loc['Anna'])\n```\nVoici un exemple de sélection de données en utilisant des noms de colonnes :\n\n```{.python}\nimport pandas as pd\n\ndata = {\n    'Nom': ['John', 'Anna', 'Peter', 'Linda'],\n    'Age': [28, 24, 35, 32],\n    'Ville': ['New York', 'Paris', 'Berlin', 'Londres']\n}\n\ndf = pd.DataFrame(data)\n\nprint(df['Age'])\n```\n\nVoici un exemple de sélection de données en utilisant des masques booléens :\n\n```{.python}\nimport pandas as pd\n\ndata = {\n    'Nom': ['John','Anna', 'Peter', 'Linda'],\n    'Age': [28, 24, 35, 32],\n    'Ville': ['New York', 'Paris', 'Berlin', 'Londres']\n}\n\ndf = pd.DataFrame(data)\n\nmask = df['Age'] > 30\n\nprint(df[mask])\n```\n\n### 2.4 Manipulation de données\n\nPandas fournit des outils pour la manipulation de données, tels que la fusion, le filtrage, l'agrégation et la transformation de données.\n\nVoici un exemple de fusion de deux DataFrames :\n\n```{.python}\n\nimport pandas as pd\n\ndata1 = {\n    'Nom': ['John', 'Anna', 'Peter'],\n    'Age': [28, 24, 35]\n}\n\ndf1 = pd.DataFrame(data1)\n\ndata2 = {\n    'Nom': ['Peter', 'Linda'],\n    'Ville': ['Berlin', 'Londres']\n}\ndf2 = pd.DataFrame(data2)\n\nmerged_df = pd.merge(df1, df2, on='Nom')\n\nprint(merged_df)\n```\nVoici un exemple de filtrage de données en utilisant des conditions :\n\n```{.python}\nimport pandas as pd\n\n\ndata = {\n    'Nom': ['John', 'Anna', 'Peter', 'Linda'],\n    'Age': [28, 24, 35, 32],\n    'Ville': ['New York', 'Paris', 'Berlin', 'Londres']\n}\n\ndf = pd.DataFrame(data)\n\nfiltered_df = df[df['Age'] > 30]\n\nprint(filtered_df)\n```\n\nVoici un exemple d'agrégation de données en utilisant des fonctions d'agrégation :\n\n```{.python}\n\nimport pandas as pd\n\ndata = {\n    'Nom': ['John', 'Anna', 'Peter', 'Linda'],\n    'Age': [28, 24, 35, 32],\n    'Ville': ['New York', 'Paris', 'Berlin', 'Londres']\n}\n\ndf = pd.DataFrame(data)\nmean_age = df['Age'].mean()\nnum_rows = df.shape[0]\n\nprint('Mean age:', mean_age)\nprint('Number of rows:', num_rows)\n```\nVoici un exemple de transformation de données en utilisant des fonctions de transformation :\n\n```{.python}\nimport pandas as pd\n\ndata = {\n    'Nom': ['John', 'Anna', 'Peter', 'Linda'],\n    'Age': [28, 24, 35, 32],\n    'Ville': ['New York', 'Paris', 'Berlin', 'Londres']\n}\n\ndf = pd.DataFrame(data)\ndf['Uppercase Name'] = df['Name'].str.upper()\n\nprint(df)\n```\nPandas est une librairie Python puissante et flexible pour l'analyse et le traitement de données. Les DataFrames sont la structure de données de base de Pandas et sont utilisés pour stocker.\n\n## 3- Les Fondamentaux de Numpy\n\n### 3.1 Tableaux NumPy\n\nLes tableaux NumPy, également appelés ndarrays, sont des tableaux multidimensionnels homogènes qui peuvent contenir des nombres entiers ou à virgule flottante. Vous pouvez créer un tableau NumPy en utilisant la fonction array() de NumPy et en passant une liste Python comme argument.\n\nVoici un exemple de création d'un tableau NumPy à une dimension :\n\n```{.python}\n\nimport numpy as np\n\narr1 = np.array([1, 2, 3, 4, 5])\nprint(arr1)\n```\n\nVous pouvez également créer un tableau NumPy à deux dimensions en utilisant une liste de listes Python :\n\n```{.python}\n\narr2 = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\nprint(arr2)\n```\n### 3.2 Indexation et tranchage\n\nVous pouvez accéder aux éléments d'un tableau NumPy en utilisant l'indexation et le tranchage. L'indexation utilise des indices entiers pour accéder à des éléments spécifiques, tandis que le tranchage utilise des intervalles pour accéder à des plages d'éléments.\n\nVoici un exemple d'indexation et de tranchage d'un tableau NumPy à une dimension :\n\n```{.python}\n\narr1 = np.array([1, 2, 3, 4, 5])\nprint(arr1[0])  \nprint(arr1[4]) \n```\nVous pouvez également utiliser l'indexation et le tranchage pour des tableaux NumPy à plusieurs dimensions.\n\n### 3.3 Opérations sur les tableaux\n\nNumPy prend en charge de nombreuses opérations sur les tableaux, telles que l'addition, la soustraction, la multiplication et la division. Vous pouvez également utiliser des fonctions NumPy pour effectuer des opérations telles que la somme, le produit et la moyenne.\n\nVoici un exemple d'opérations sur des tableaux NumPy :\n\n```{.python}\n\narr1 = np.array([1, 2, 3])\narr2 = np.array([4, 5, 6])\n\nprint(arr1 + arr2)  \n\nprint(arr1 * arr2)  \n\nprint(np.sum(arr1))  \n\nprint(np.mean(arr1)) \n```\n\nNumPy est une bibliothèque Python puissante et utile pour le calcul numérique. Elle fournit des types de données et des fonctions pour traiter des tableaux multidimensionnels de manière efficace. En utilisant des tableaux NumPy, vous pouvez effectuer des opérations numériques rapides et efficaces en Python."},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":"auto","echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"markdown"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["styles.css"],"toc":true,"output-file":"cours.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.4.553","theme":{"light":"cosmo","dark":"cyborg"},"title":"COURS"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}